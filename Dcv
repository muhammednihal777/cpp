// C++ Program to Check if a Binary Tree is subtree
// of another binary tree 

#include <bits/stdc++.h>

using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

// Utility function to check if two trees are identical
bool areIdentical(Node* root1, Node* root2) {
    if (root1 == nullptr && root2 == nullptr)
        return true;
    if (root1 == nullptr || root2 == nullptr)
        return false;

    // Check if data and left/right subtrees are identical
    return (root1->data == root2->data &&
            areIdentical(root1->left, root2->left) &&
            areIdentical(root1->right, root2->right));
}

// Function to check if root2 is a subtree of root1
bool isSubtree(Node* root1, Node* root2) {
    if (root2 == nullptr)
        return true; 
    if (root1 == nullptr)
        return false; 
  
    // Check if the current node of root1 matches 
      // the root of root2
    if (areIdentical(root1, root2))
        return true;

    // Recur for left and right subtrees of root1
    return isSubtree(root1->left, root2) 
      || isSubtree(root1->right, root2);
}

int main() {
  
    // Construct Tree root1
    //          26
    //         /  \
    //        10   3
    //       / \    \
    //      4   6    3
    //       \
    //        30
    Node* root1 = new Node(26);
    root1->right = new Node(3);
    root1->right->right = new Node(3);
    root1->left = new Node(10);
    root1->left->left = new Node(4);
    root1->left->left->right = new Node(30);
    root1->left->right = new Node(6);

    // Construct Tree root2
    //          10
    //         /  \
    //        4    6
    //         \
    //          30
    Node* root2 = new Node(10);
    root2->right = new Node(6);
    root2->left = new Node(4);
    root2->left->right = new Node(30);

    if (isSubtree(root1, root2))
        cout << "true";
    else
        cout << "false";

    return 0;
}
